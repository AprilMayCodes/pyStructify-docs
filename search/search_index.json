{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyStructify","text":"<p>Welcome to pyStructify! This was a weeks long labor of love, and is my very first finished project.</p> <p>DOWNLOAD LINK COMING SOON</p> <p>Once it's packaged and ready to go, you'll be able to download it here. In the meantime, you can check out the docs to get a feel for how it works and to learn more about it.</p>"},{"location":"about/about/","title":"About pyStructify","text":""},{"location":"about/about/#what-it-is","title":"What It Is","text":"<p>pyStructify is a desktop app that handles the boilerplate and creating a project structure for you. With it, you're just a few clicks away from even the most complex project structure being created. pyStructify will also create a virtual environment if desired, create your requirements.txt with the packages you've chosen to include, and optionally install those requirements in your virtual environment. It can also initialize a git repository for the project, as well as create a README.md.</p> <p>For general projects, you'll create the subdirectories and files that you'll need all within the app, preview your project structure, and then have it created. For Flask projects, you can choose whether or not to use blueprints, and adjust the default boilerplate in files such as <code>__init__.py</code> and <code>base.html</code>.</p> <p>pyStructify aims to take the tedium out of starting complex projects, so that you can jump right into the code.</p>"},{"location":"about/about/#inspiration","title":"Inspiration","text":"<p>I've been making web apps with Flask for a few years - or starting them, at least. I always seem to get a shiny new idea before the last one is finished. Because of that, I write the same lines of code a lot. Practically nothing changes in <code>__init__.py</code> but my blueprint names. The structure for a lot of my projects is the same.</p> <p>Recently, I tried to learn Django. Gave up on that pretty quickly; Flask is all I need. But something did stick out to me - when you create a Django project it creates a project skeleton for you; some of the folders and files you'll need, boilerplate included. I thought - Flask needs this.</p> <p>Initially this idea lived as a command line flask project skeleton generator on my github, but I wanted something easier. (Anyone else hate the command line? Just me? Ok.) So (with no real GUI knowledge), I decided to make a desktop application, and then expanded the scope of it to include general projects as well.</p> <p>In truth, I set out to automate something minor, but just kept adding functionality. I'm pretty happy with the finished product, and I hope it saves you all some time as well!</p>"},{"location":"about/about/#about-aprilmay","title":"About AprilMay","text":"<p>I'm a self taught hobbyist developer with a love for putting things together. I started learning python in early 2020 and have been obsessed with it ever since. I've started what seems like a million projects, but pyStructify is the first that I really committed to. I really sat down and said I'm not jumping to the next new idea, I'm going to finish this one. And after a few weeks, that's exactly what I did! I know it's not some groundbreaking or innovative software, but it's near and dear to my heart and I hope you find it useful.</p>"},{"location":"about/license/","title":"MIT License","text":"<p>Copyright (c) 2024 April Myles</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"user-guide/flask-projects/","title":"Flask Projects","text":"<p>The Flask Project screen consists of 2-4 tabs, depending on what settings you chose in the New Project screen.</p>"},{"location":"user-guide/flask-projects/#blueprints","title":"Blueprints","text":"<p>The first tab is where you'll name your blueprints. There will be a number of inputs equal to the number of blueprints you chose to include, or none, if you selected 0. Type the blueprint name(s) in, if applicable, then move on to the next tab.</p>"},{"location":"user-guide/flask-projects/#packages","title":"Packages","text":"<p>On the left is a list of commonly used packages. If you need anything that's not listed, simply type it into the box on the right. Enter a new line between each item.</p>"},{"location":"user-guide/flask-projects/#environment-variables","title":"Environment Variables","text":"<p>Note: A SECRET_KEY is automatically included, you do not need to add that here. If you would like to add any additional environment variables, you can do that here. It should look like:</p> <p><code>VARIABLE=\"value\"</code></p> <p>For example:</p> <p><code>MAIL_USERNAME=\"contact@aprilmaycodes.com\"</code></p>"},{"location":"user-guide/flask-projects/#review","title":"Review","text":"<p>On the final tab you have the opportunity to review your project settings and structure before committing to it.</p> <p>On the left, the settings you've chosen to (or not to) include will be listed, and below them the blueprints you've included, the packages that will be added to your requirements.txt, and the Environment Variables you've created.</p> <p>If you need to make any changes, you can navigate to previous tabs and update them. </p> <p>To preview the project structure, click the <code>Preview Structure</code> button on the bottom left. This will open a display on the right side of the screen with your current project structure. The structure is the same for all Flask projects, with the exception of the optional files you selected on the New Project screen. If the project looks good to you, click the <code>Create Project</code> button.</p> <p>A loading icon will be displayed while the project is being created, and then a popup window will appeat letting you know your project has been created. Once you close this popup, you'll be redirected to the home screen.</p>"},{"location":"user-guide/general-projects/","title":"General Projects","text":"<p>The General Project screen consists of 2-4 tabs, depending on what settings you chose in the New Project screen.</p>"},{"location":"user-guide/general-projects/#structure","title":"Structure","text":""},{"location":"user-guide/general-projects/#adding-files-and-folders","title":"Adding Files and Folders","text":"<p>On the first tab, you'll create your project structure. This can be as simple or a complex as you need. To get started, simply click on the root folder.</p> <p>A window will pop up where you'll have the option to add a File or a Dir (Directory). Select whichever is appropriate. The window will close and an input will appear below the directory. Type the name of the subdirectory or file (don't forget the extension) and press Enter or click <code>Save</code>.</p> <p>Continue in this manner until all the folders and files you need are created.</p> <p>*Note: If you click on a File, you won't have the option to add a Dir or File. That is only available for Directories.</p>"},{"location":"user-guide/general-projects/#editing-files-and-folders","title":"Editing Files and Folders","text":"<p>If you need to rename or delete a folder, other than the main project folder, start by clicking the item you need to edit. Above the add options are a <code>Rename</code> and a <code>Delete</code> button.</p> <ul> <li>To rename an item click the button, enter the new name, and press enter.</li> <li>To delete an item, click the delete button, and then the confirmation button.</li> </ul> <p>Note: Deleting a directory will delete everything within that directory</p> <p>When you are happy with your project structure, move on to the second tab.</p>"},{"location":"user-guide/general-projects/#packages","title":"Packages","text":"<p>On the left is a list of commonly used packages. If you need anything that's not listed, simply type it into the box on the right. Enter a new line between each item.</p>"},{"location":"user-guide/general-projects/#environment-variables","title":"Environment Variables","text":"<p>Note: A SECRET_KEY is automatically included, you do not need to add that here. If you would like to add any additional environment variables, you can do that here. It should look like:</p> <p><code>VARIABLE=\"value\"</code></p> <p>For example:</p> <p><code>MAIL_USERNAME=\"contact@aprilmaycodes.com\"</code></p>"},{"location":"user-guide/general-projects/#review","title":"Review","text":"<p>You have the opportunity to review your project on the final tab, before it is created.</p> <p>On the right is your project structure. On the left, you can look over the settings you've chosen.</p> <p>Once you're happy with your project, click <code>Create Project</code> and let the magic happen! A loading icon will pop up and then you'll be redirected to the home page once the project is complete.</p>"},{"location":"user-guide/new-projects/","title":"Creating a New Project","text":"<p>To start, you'll navigate to the New Project page, either by clicking <code>New Project</code> on the Home Page, or going to File &gt; New Project in the menubar.</p>"},{"location":"user-guide/new-projects/#name-and-location","title":"Name and Location","text":"<p>Once on the New Project page, there are several options available to you. If you've already set a default folder in the Preferences page, the selected directory will be displayed on the left. If you haven't, or if you want this project in a different directory, you can update the file path with the <code>Choose Directory</code> button.</p> <p>Below that, you'll name your project. snake_case is best practice, and spaces will automatically be replaced with an underscore. Be sure you've set a project name and the directory is set, you won't be able to proceed if this isn't done.</p> <p>The complete project path is displayed below the project name input.</p>"},{"location":"user-guide/new-projects/#optional-settings","title":"Optional Settings","text":"<p>On the right are a list of optional settings. </p> <p>Flask Project -  Flask projects will be created with blueprints and boilerplate files.</p> <p>Number of Blueprints - If you're creating a Flask project, set how many blueprints you will need. (You can always add more manually if needed, once the project is created.) If you don't use blueprints, leave this as 0.</p> <p>Create Virtual Environment - If enabled, pyStructify will create a virtual environment for you in your project's root folder.</p> <p>Virtual Environment Name - If you've opted to include a virtual environment, this will be what it is named.</p> <p>Create Git Repo - Only available if Git is installed on your computer. pyStructify will initialize the empty project directory as a git repo before creating the rest of the project structure.</p> <p>Create README.md - Will create a README.md file in your projects root folder.</p> <p>Create requirements.txt Will create a requirements.txt file, and allow you to select or list packages you want added to in on the next page.</p> <p>Install Requirements Upon Project Creation - If checked, pyStructify will install your requirements (in your virtual environment if you've chosen to include one) once the project is created.</p> <p>Configure Environment Variables - pyStructify will always generate a .env file for you with a randomly generated SECRET_KEY. If this box is checked, you will have the option to add additional environment variables on the next screen.</p> <p>Note: pyStructify does not store your environment variables. The information is cleared once the project is created or the program is exited.</p>"},{"location":"user-guide/new-projects/#moving-on","title":"Moving On","text":"<p>Once you're happy with your settings, click <code>Get Started!</code></p> <p>If you've checked the Flask Project box, you will be redirected to the Flask configuration screen.</p> <p>Otherwise, you will be redirected to the General configuration screen</p>"},{"location":"user-guide/other-pages/","title":"Other Pages","text":""},{"location":"user-guide/other-pages/#help","title":"Help","text":""},{"location":"user-guide/other-pages/#documentation","title":"Documentation","text":"<p>This page displays the User Guide information from the docs, and links to the official docs if you need additional clarification.</p>"},{"location":"user-guide/other-pages/#report-issue","title":"Report Issue","text":"<p>This page has a button that will open your web browser to the \"pyStructify Bug Report\" form. You can use this form (or email me directly) to notify me of any bugs you find. I am not a professional developer, and this was my first project so I'm sure there's bound to be things I overlooked. Please don't hesitate to reach out if/when you find bugs. </p>"},{"location":"user-guide/other-pages/#info","title":"Info","text":""},{"location":"user-guide/other-pages/#about","title":"About","text":"<p>The About page is similar to in the docs. It lists provides information like what the project is, why I made it, and who I am.</p>"},{"location":"user-guide/other-pages/#license","title":"License","text":"<p>Standard MIT License</p>"},{"location":"user-guide/other-pages/#check-for-updates","title":"Check for Updates","text":"<p>Want to make sure you're app is up to date? Click the <code>Check For Updates</code> button on this page, and pyStructify will let you know if there's been an update. If there has, you can click the <code>Update</code> button to get access to the download link.</p>"},{"location":"user-guide/other-pages/#show-support","title":"Show Support","text":"<p>This page covers how you can show your support. I am a solo hobbyist developer with a full time job. As much as I'd like to transition to a software develop career, I think it won't be in the cards for quite some time. In the meantime, donations are always appreciated, but so is feedback. You can email me at contact@aprilmaycodes.com if you have any questions, concerns, or just constructive criticism.</p>"},{"location":"user-guide/preferences/","title":"Preferences","text":"<p>When you first run the app, after the walkthrough, you'll be directed here to set a default directory.</p> <p>You don't have to set one, but until one is set it will open to the Preferences page on startup. Note: Even with a default directory set, when you go to create a new project you have the option to update the directory it will be stored in.</p> <p>The Preferences page consists of two tabs, General and Flask.</p>"},{"location":"user-guide/preferences/#general","title":"General","text":"<p>The General tab holds the default values of the options on the New Project screen. </p> <ul> <li> <p>Default Project Directory - The default directory projects will be created in (unless you update the directory on the new project screen)</p> </li> <li> <p>Flask Project -  Flask projects will be created with blueprints and boilerplate files.</p> </li> <li> <p>Number of Blueprints - If you're creating a Flask project, set how many blueprints you will need. (You can always add more manually if needed, once the project is created.) If you don't use blueprints, leave this as 0.</p> </li> <li> <p>Create Virtual Environment - If enabled, pyStructify will create a virtual environment for you in your project's root folder.</p> </li> <li> <p>Virtual Environment Name - If you've opted to include a virtual environment, this will be what it is named.</p> </li> <li> <p>Create Git Repo - Only available if Git is installed on your computer. pyStructify will initialize the empty project directory as a git repo before creating the rest of the project structure.</p> </li> <li> <p>Create README.md - Will create a README.md file in your projects root folder.</p> </li> <li> <p>Create requirements.txt Will create a requirements.txt file, and allow you to select or list packages you want added to in on the next page.</p> </li> <li> <p>Install Requirements Upon Project Creation - If checked, pyStructify will install your requirements (in your virtual environment if you've chosen to include one) once the project is created.</p> </li> <li> <p>Configure Environment Variables - pyStructify will always generate a .env file for you with a randomly generated SECRET_KEY. If this box is checked, you will have the option to add additional environment variables on the next screen.</p> </li> </ul> <p>Updating values here stores them in pyStructify, so that when you navigate to New Project, it reflects the options you chose. Some are checked by default, but it's up to you to set it up exactly how you want it.</p> <p>When you're happy with the settings you've chosen, click <code>Save Settings</code> at the bottom. Note: If you navigate away from this page without saving, your changes will be lost. If you want to restore the default values, click <code>Restore Defaults</code>, below the save button.</p> <p>Note: The button to save the default directory is not* the same as the save settings button. Once you've chosen a directory, a <code>Save</code> button will appear on the top right. This will update your directory settings. Anything else is handled with the bottom <code>Save Settings</code> button.</p>"},{"location":"user-guide/preferences/#flask","title":"Flask","text":"<p>Here is where you can setup the boilerplate for your Flask projects.</p> <p>The defaults are set to the structure that I use with my Flask projects, including importing bootstrap 5.3 in <code>base.html</code>, importing packages in <code>__init__.py</code>, and setting up a User model in <code>models.py</code>. The files listed on the left are not the only files that will be generated, they are just the only ones configurable in pyStructify.</p> <p>To begin editing the boilerplate, click the file you want to work on. This will open up an input on the right side of the screen, with the current default value. When you have finished making changes, click <code>Save</code>.</p>"},{"location":"user-guide/preferences/#important-notes","title":"IMPORTANT NOTES","text":"<ul> <li>The <code>{project_name}</code> and <code>{bp}</code> placeholders will appear a couple times in the default code. Be cautious when making changes to these sections. It may cause your project to be created with code that doesn't run properly.</li> <li>You can use these placeholders wherever you need your project or blueprint names. Note: the <code>{bp}</code> placeholder is only available in the two specified blueprint files.</li> <li>The default values are stored as strings, so when using jinja syntax in <code>base.html</code> you need to add an extra pair of curly brackets <code>{}</code> around each one. Ex: in base.py the title is stored as <code>{{{{title}}}}</code>. This is to escape the escape sequence. So when it is written to your actual <code>base.html</code> file, it will just appear as <code>{{title}}</code>.</li> <li>In <code>__init__.py</code>, DO NOT update any code below <code>with app.app_context():</code>. This is how the blueprint imports and registrations are handled, and needs to be written this way for the project to work correctly. I included it in the input so if you know what you're doing and want to adjust the <code>__init__.py</code> boilerplate, you can see the full <code>create_app()</code> function. But editing the lines below the aforementioned one will result in your project not being created properly.</li> </ul> <p>*Note: be sure to always click the <code>Save</code> button when updating the boilerplate. If you navigate away without saving, your changes will be lost.`</p> <p>If you've removed the <code>with app.app_context()</code> line or you just want to remove any changes you added, scroll to the bottom and click the <code>Restore Defaults</code> button on the left. </p> <p>Note: The tab you are on determines what defaults will be updated. If you want to update everything to the default, you will need to click <code>Restore Defaults</code> on both the Flask tab and the General tab.</p>"}]}